py -m PyInstaller Game.py --noconsole
auto-py-to-exe




TODO:
Fix Render order {The player outline is rendering under the terrain}
Create a known bug list
try to fix the dialogue lag - Done?

Move the grass from side to side when walking USE y = abs(sin(x)) * 10
make the grass faster, so it does not idle
save / load
moon/sun
Remake the Main Menu
Fix Resolution Menu

TODO EASTER EGGS:
Add level -1
drag moon around




TODO PERFORMANCE:
Optimize Collision Detection: In your Entities.py file, you're checking for collisions between entities and every other entity in the game. This can be quite expensive, especially as the number of entities increases. Consider using a spatial partitioning data structure like a quadtree or a grid to reduce the number of collision checks you need to perform.


TODO NEXT:
Better Combat
inventory system
more enemies
more weapons
settings icon in the top right of the screen


TODO POLISH:
fix the charging particles
wait a few seconds after death before resetting
polish resolution menu
Remake the Main Menu
reset player dash and movement and velocity when loading level
Make buttons slide down onto screen for pause screen
Make buttons slide down onto screen for main menu
Make buttons slide down onto screen for options menu
Make buttons slide down onto screen for resolution menu
Make buttons slide down onto screen for keybind menu
Fix Resolutions
resolution menu
keybind menu
collectibles
background
stars

TODO TIMESCALE:
FIX TIME SCALE

add it to
- gravity
- enemy movement
- projectile movement
- particles
- dash deceleration and acceleration



TODO ENEMIES:
Enemy that shoots projectile at range
Enemy that has melee attack

TODO FIX:
prevent missed input for jumping on wall dash (input buffering)
prevent missed input for jumping on wall regular jump (input buffering)


TODO DONE:
add sword charge ability
make the sliders work
dashing too far/dashing into projectiles
fix menus
bullets go behind tiles
deflect bullets and can kill
money system
Optimize Collision Detection: In your Entities.py file, you're checking for collisions between entities and every other entity in the game. This can be quite expensive, especially as the number of entities increases. Consider using a spatial partitioning data structure like a quadtree or a grid to reduce the number of collision checks you need to perform.
Optimize Rendering: In your Game.py file, you're rendering every entity in the game, regardless of whether it's on-screen or not. Consider implementing a system that only renders entities that are within the viewport.
Fixed RECREATING MENU EACH FRAME
Health System
Attack System
key binds
don't jump right after starting game
iFrames for dashing
vertical dash
Move everything to Scripts folder
iFrames more accurate
main menu
pause menu
small dash sideways when not moving
Options Menu
swap X and C
Split up Enemies into their own file
Sandy Desert
Snowy Mountains
Grassy Plains
Cave
Rain Forest
Volcanic Wasteland?
Omnidirectional dash


TODO SCRAPPED:
Climb walls
C interact Key
level select